# Dockerfile

# --- Stage 1: Build Conda Environment ---
# Using a Miniconda base image for efficiently building Conda environments
FROM continuumio/miniconda3:latest as builder

# Set the working directory for this stage
WORKDIR /build_env

# Copy your environment.yml file into the builder stage
COPY server_api/environment.yml .

# Create the Conda environment
# Use --file instead of -f for clarity
# Use --force to ensure it overwrites if an env with the same name exists (useful during dev builds)
# Clean up conda cache to reduce image size
RUN conda env create --file environment.yml && \
    conda clean --all --yes

# --- Stage 2: Final Application Image ---
# Use a slim Python base image for the final production image
# This is lighter than carrying over the entire Conda base
FROM python:3.12-slim

# Set the working directory for the application
WORKDIR /app

# Copy the created Conda environment from the builder stage to the final image
# This copies the entire environment into the final image's /opt/conda/envs directory
COPY --from=builder /opt/conda/envs/fastapi_app_env /opt/conda/envs/fastapi_app_env

# Set the PATH to include the Conda environment's bin directory
# This ensures that Python and installed executables (like uvicorn)
# from our Conda env are used.
ENV PATH="/opt/conda/envs/fastapi_app_env/bin:$PATH"

# Set Python to unbuffered output (good for Docker logging)
ENV PYTHONUNBUFFERED=1

# Copy your application code into the final image
# Assuming your app code is in 'server_api' relative to the Dockerfile
COPY server_api/ .

# Expose the port your FastAPI application listens on
EXPOSE 8000

# Command to run your FastAPI application using Uvicorn
# 0.0.0.0 makes it accessible from outside the container
# --host 0.0.0.0 and --port 8000 are standard for Uvicorn in Docker
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]